AWSTemplateFormatVersion: '2010-09-09'
Description: 'Creates the base Tank Agent that can be snapshotted for use in tank.'
Parameters:
  AmiId:
    Type: 'AWS::EC2::Image::Id'
    Description: The ID of the latest Amazon Linux 2 baseline AMI
  TankZip:
    Type: 'String'
    Default: 'TankZip.zip'
    Description: File path to Tank agent-startup-pkg.zip Filename in S3 (ie. s3://bucket/keyname)
  InstanceType:
    Description: Amazon EC2 instance type
    Type: 'String'
    Default: 'c5.large'
  KeyName:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Description: Amazon EC2 Key Pair
  SubnetIds:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Description: Subnet IDs
  SecurityGroupIds:
    Type: 'List<AWS::EC2::SecurityGroup::Id>'
    Description: SecurityGroup IDs

Resources:
  AgentInstance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - 'cloudwatch-install'
            - 'agent-install'
        cloudwatch-install:
          packages: {}
          sources: {}
          files:
            /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.d/tank-cloudwatch-config.json:
              content: |
                {"logs":{"force_flush_interval":5,"logs_collected":{
                  "files":{"collect_list":[{"file_path":"/opt/tank_agent/logs/agent.log","log_group_name":"/opt/tank_agent/logs/agent.log","log_stream_name":"{instance_id}"}]}}},
                  "metrics":{"append_dimensions":{"InstanceId":"${aws:InstanceId}"},"metrics_collected":{
                    "netstat":{"measurement":["tcp_established","tcp_syn_sent","tcp_close"],"append_dimensions":{"Service":"TankAgent"},"metrics_collection_interval":60},
                    "disk":{"measurement":["used_percent"],"resources":["/"],"append_dimensions":{"Service":"TankAgent"},"metrics_collection_interval":60},
                    "mem":{"measurement":["mem_used_percent"],"append_dimensions":{"Service":"TankAgent"},"metrics_collection_interval":60}}}}
              mode: '000644'
              owner: 'cwagent'
              group: 'cwagent'
          commands: {}
          services:
            sysvinit:
              amazon-cloudwatch-agent:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - "/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.d/tank-cloudwatch-config.json"
          users: {}
          groups: {}
        agent-install:
          packages:
            yum:
              unzip: []
              java-11-amazon-corretto-headless: []
          sources: {}
          files:
            /etc/init.d/tank_agent:
              content: |
                #!/bin/bash
                # tank_agent
                # chkconfig: 2345 99 99
                # description: agent for Tank project
                ### BEGIN INIT INFO
                # Provides: $tank_agent
                ### END INIT INFO
                # Source function library.
                  . /etc/init.d/functions

                  RETVAL=0
                  umask 077
                  start() {
                echo -n $"Starting Tank Agent: "
                       pushd /opt/tank_agent
                       ulimit -n 20000;
                       ulimit -a >> /tmp/ulimit_out;
                       daemon /opt/tank_agent/run.sh&
                       echo
                       return $RETVAL
                }
                stop() {
                       echo -n $"Shutdown agent startup: "
                       kill -9 `ps -ef | grep agent-startup-all | grep -v grep | awk '{print $2}'`
                       return $RETVAL
                }
                restart() {
                       stop
                       start
                }
                case "$1" in
                  start)
                  start
                  ;;
                  stop)
                  stop
                  ;;
                  restart|reload)
                  restart
                  ;;
                  *)
                echo $"Usage: $0 {start|stop|restart}"
                  exit 1
                  esac
                  exit $?
              mode: '000755'
              owner: 'root'
              group: 'root'
          commands:
            010_update_DNS_in_security:
              command: 'sed -i.bak "s/networkaddress.cache.negative.ttl=10/networkaddress.cache.negative.ttl=0/g" /etc/alternatives/jre/conf/security/java.security'
            020_download_startup_pkg:
              command: !Sub 'aws s3 cp ${TankZip} /tmp/agent-startup-pkg.zip'
            021_unzip_startup_pkg:
              command: 'unzip /tmp/agent-startup-pkg.zip -d /opt'
            022_mkdir_logs:
              command: 'mkdir /opt/tank_agent/logs'
            030_increase_Ephemeral Ports:
              command: 'echo "net.ipv4.ip_local_port_range=1024 65000" >> /etc/sysctl.conf'
            031_set_file_open_limit:
              command: 'sed -i "s/#DefaultLimitNOFILE=/DefaultLimitNOFILE=81960/" /etc/systemd/system.conf'
            032_set_file_open_limit:
              command: 'sed -i "s/#DefaultLimitNOFILE=/DefaultLimitNOFILE=81960/" /etc/systemd/user.conf'
          services:
            sysvinit:
              tank_agent:
                enabled: 'true'
                ensureRunning: 'true'
          users: {}
          groups: {}
    Properties:
      ImageId: !Ref AmiId
      InstanceType: !Ref InstanceType
      SecurityGroupIds: !Ref SecurityGroupIds
      KeyName: !Ref KeyName
      SubnetId: !Ref SubnetIds
      Tags:
        - Key: 'Name'
          Value: 'Tank Agent AMI'
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash -v
            # Ensure our PATH is set correctly (on Amazon Linux cfn-signal is in /opt/aws/bin)
            . ~/.bash_profile
            yum -y update
            cfn-init -v \
               --region  ${AWS::Region} \
               --stack   ${AWS::StackName} \
               --resource AgentInstance
            cfn-signal -e $? \
               --region  ${AWS::Region} \
               --stack   ${AWS::StackName} \
              '${UIInstanceWaitHandle}'
  UIInstanceWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
    Properties: {}
  UIInstanceWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: AgentInstance
    Properties:
      Handle: !Ref UIInstanceWaitHandle
      Timeout: '1500'

Outputs:
  AgentInstanceId:
    Description: InstanceId of the newly created agent instance
    Value: !Ref AgentInstance
  AZ:
    Description: Availability Zone of the newly created EC2 instance
    Value: !GetAtt [ 'AgentInstance', 'AvailabilityZone' ]
