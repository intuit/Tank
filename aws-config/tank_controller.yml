AWSTemplateFormatVersion: 2010-09-09
Description: Controller Instance - Creates a Tank controller installing java tomcat and configuring the instances appropriately.
Parameters:
  AmiId:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
    Description: The ID of the latest Amazon Linux 2 baseline AMI
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance.
  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Private subnet for the internal instance ip
  TankWar:
    Type: String
    Description: File path to Tank tank.war Filename in S3 (ie. s3://bucket/keyname)
  TankSettings:
    Type: String
    Description: File path to Tank settings.xml Filename in S3 (ie. s3://bucket/keyname)
  RdsPassword:
    Type: String
    NoEcho: true
    Description: Something secret (more than 8 characters)
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3a.medium
    AllowedValues: [ 't3a.medium', 't3.medium', 't3a.large', 't3.large', 't3a.xlarge', 't3.xlarge', 'm5.large', 'm5.xlarge', 'c5.xlarge', 'c5.2xlarge' ]
    ConstraintDescription: Must be one of t3.medium t3.large t3.xlarge m5.large m5.xlarge c5.xlarge or c5.2xlarge

Mappings:
  InstanceMap:
    t3a.medium:
      JvmHeap: '2g'
    t3.medium:
      JvmHeap: '2g'
    t3a.large:
      JvmHeap: '4g'
    t3.large:
      JvmHeap: '4g'
    t3a.xlarge:
      JvmHeap: '10g'
    t3.xlarge:
      JvmHeap: '10g'
    c5.large:
      JvmHeap: '1g'
    c5.xlarge:
      JvmHeap: '5g'
    c5.2xlarge:
      JvmHeap: '8g'
    m5.large:
      JvmHeap: '4g'
    m5.xlarge:
      JvmHeap: '10g'

Resources:
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: tank
      AutoMinorVersionUpgrade: true
      DBInstanceClass: db.t3.large
      Port: 3306
      AllocatedStorage: 100
      BackupRetentionPeriod: 30
      DBName: tank
      Engine: mysql
      EngineVersion: 8.0.21
      MasterUsername: admin
      MasterUserPassword: !Ref RdsPassword
      DBSecurityGroups:
        - !Ref RDSSecurityGroup

  RDSSecurityGroup:
    Type: AWS::RDS::DBSecurityGroup
    Properties:
      GroupDescription: Ingress for Amazon EC2 security group
      DBSecurityGroupIngress:
        - EC2SecurityGroupName: !Ref SecurityGroup

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow ssh and http tomcat to client host
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0

  ControllerInstance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default: ['metric-config', 'tomcat-config' ]
        metric-config:
          packages:
            yum:
              amazon-cloudwatch-agent: []
            rpm:
              xray-daemon: !Sub 'https://s3.dualstack.${AWS::Region}.amazonaws.com/aws-xray-assets.us-east-2/xray-daemon/aws-xray-daemon-3.x.rpm'
          groups: {}
          users: {}
          sources: {}
          files:
            /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.d/tank-cloudwatch-config.json:
              content: |
                {"logs":{"force_flush_interval":5,"logs_collected":{
                  "files":{"collect_list":[
                    {"file_path":"/var/log/tomcat/catalina*.log","log_group_name":"/var/log/tomcat/catalina.log","log_stream_name":"{instance_id}"},
                    {"file_path":"/var/log/tomcat/tank.log","log_group_name":"/var/log/tomcat/tank.log","log_stream_name":"{instance_id}"},
                    {"file_path":"/var/log/tomcat/gc.log","log_group_name":"/var/log/tomcat/gc.log","log_stream_name":"{instance_id}"},
                    {"file_path":"/var/log/messages","log_group_name":"/var/log/messages","log_stream_name":"{instance_id}"}]}}},
                  "metrics":{"append_dimensions":{"InstanceId":"${aws:InstanceId}","InstanceType":"${aws:InstanceType}"},"metrics_collected":{
                    "disk":{"measurement":["used_percent"],"resources":["/"],"append_dimensions":{"Service":"Tank"},"metrics_collection_interval":60},
                    "mem":{"measurement":["mem_used_percent"],"append_dimensions":{"Service":"Tank"},"metrics_collection_interval":60}}}}
              mode: '000644'
              owner: 'cwagent'
              group: 'cwagent'
          commands:
            000_install_tomcat:
              command: 'amazon-linux-extras install tomcat9'
          services:
              amazon-cloudwatch-agent:
                enabled      : true
                ensureRunning: true
                files:
                  - "/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.d/tank-cloudwatch-config.json"
        tomcat-config:
          packages: {}
          sources: {}
          files:
            /etc/tomcat/conf.d/catalina_opts.conf:
              content: !Sub
                - |
                  CATALINA_OPTS="-Xms${heap} -Xmx${heap} -XX:+UseG1GC -Dcom.amazonaws.sdk.enableDefaultMetrics=cloudwatchRegion=${AWS::Region} -Xlog:gc=debug:file=/var/log/tomcat/gc.log:time,uptime,level,tags:filecount=3,filesize=200m"
                - {
                  heap: !FindInMap [ InstanceMap, !Ref InstanceType, JvmHeap ]
                }
              mode: '000755'
              owner: 'root'
              group: 'tomcat'
            /etc/tomcat/context.xml:
              content: !Sub |
                <?xml version="1.0" encoding="UTF-8"?>

                <Context>
                    <Resource name="jdbc/watsDS" auth="Container"
                    type="javax.sql.DataSource"
                    factory="org.apache.tomcat.jdbc.pool.DataSourceFactory"
                    maxWait="10000"
                    username="admin"  password="${RdsPassword}"
                    testOnBorrow="true"
                    validationQuery="SELECT 1"
                    removeAbandonedOnBorrow="true"
                    removeAbandonedOnMaintenance="true"
                    removeAbandonedTimeout="60"
                    driverClassName="com.mysql.cj.jdbc.Driver"
                    jdbcInterceptors="com.amazonaws.xray.sql.mysql.TracingInterceptor"
                    url="jdbc:mysql://${RDSInstance.Endpoint.Address}:${RDSInstance.Endpoint.Port}/tank"/>
                </Context>
              mode: '000644'
              owner: 'root'
              group: 'tomcaat'
          commands:
            020_download_settings:
              command: !Sub 'aws s3 cp ${TankSettings} /usr/share/tomcat/settings.xml'
            030_permissions:
              command:  'chown root:tomcat /usr/share/tomcat/settings.xml'
            #031_set_publicDNSName:
            #  command: !Sub 'sed -i "s/localhost:8080/${ControllerInstance.PublicDnsName}:8080/" /usr/share/tomcat/settings.xml'
            040_download_tank:
              command: !Sub 'aws s3 cp ${TankWar} /usr/share/tomcat/webapps/ROOT.war'
          services:
            sysvinit:
              tomcat:
                enabled      : true
                ensureRunning: true
          users: {}
          groups: {}
    Properties:
      ImageId:  !Ref AmiId
      InstanceType:  !Ref InstanceType
      IamInstanceProfile: !ImportValue TankControllerProfile
      SecurityGroupIds:
        - !GetAtt SecurityGroup.GroupId
      KeyName: !Ref KeyName
      SubnetId: !Ref SubnetId
      Tags:
        -
          Key: Name
          Value: Tank
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -v
          # Ensure our PATH is set correctly (on Amazon Linux cfn-signal is in /opt/aws/bin)
          . ~/.bash_profile
          yum update -y
          /opt/aws/bin/cfn-init -v \
            --region  ${AWS::Region} \
            --stack   ${AWS::StackName} \
            --resource ControllerInstance
          /opt/aws/bin/cfn-signal -e $? \
            --region  ${AWS::Region} \
            --stack   ${AWS::StackName} \
            '${UIInstanceWaitHandle}'
  UIInstanceWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
    Properties: {}
  UIInstanceWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: ControllerInstance
    Properties:
      Handle:  !Ref UIInstanceWaitHandle
      Timeout: 1800

Outputs:
  InstanceId:
    Description: InstanceId of the newly created controller instance
    Value:  !Ref ControllerInstance
  PublicDnsName:
    Description: PublicDnsName endpoint of the newly created ControllerInstance
    Value:  !GetAtt [ 'ControllerInstance', 'PublicDnsName' ]
