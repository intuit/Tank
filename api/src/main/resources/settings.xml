<?xml version="1.0" encoding="UTF-8"?>

<tank-settings>

  <!-- The server side storage directory for datafiles. 
  Can be an absolute or relative path or an s3 bucket by prefixing a bucket with s3: e.g. s3:tank-data-files -->
  <data-file-storage>datafiles</data-file-storage>
  
  <!-- The server side storage directory for timing data.
  Can be an absolute or relative path or an s3 bucket by prefixing a bucket with s3: e.g. s3:tank-timing-files -->
  <timing-file-storage>timing</timing-file-storage>

  <!-- The server side storage directory for agent files to be sent to agents. All files in this directory will be sent to each agent.
  to override the default agent startup behavior, include a start_wats.sh script with modifications.
  Can be an absolute or relative path or an s3 bucket by prefixing a bucket with s3: e.g. s3:tank-agent-supports -->
  <jar-file-storage>jars</jar-file-storage>

  <!-- The server side storage directory for temp script files. must be local file system. -->
  <tmp-file-storage>tmpfiles</tmp-file-storage>

  <!-- name of this instance (no spaces). used in timing table names. -->
  <instance-name>tank</instance-name>

  <!-- The baseUrl for the controller. Must include the context (tank) -->
  <controller-base-url>http://localhost:8080/tank</controller-base-url>

  <!-- if this instance is a standalone instance and should not start agents 
    automatically. -->
  <standalone>false</standalone>
  
  <!--  set to true to encrypt data at rest in s3 buckets -->
  <s3-encrypt>false</s3-encrypt>

  <!-- if this rest calls require authentication using api key or username/password 
    or logged in via session -->
  <rest-security-enabled>true</rest-security-enabled>

  <!-- Products that can be selected by users for categorization -->
  <products>
    <product name="">All Products</product>
    <product name="MyProduct">My Product</product>
  </products>

  <!-- Locations used for informational purposes only. -->
  <locations>
    <location name="unspecified" displayName="Unspecified" />
    <location name="san_diego" displayName="San Diego\, CA" />
  </locations>

  <!-- mail configuration for notifications -->
  <mail>
    <mail.smtp.host>localhost</mail.smtp.host>
    <mail.smtp.port>25</mail.smtp.port>
    <from-email>do_not_reply@mydomain.com</from-email>
  </mail>
  
  <reporting>
    <provider>
    <!-- Reporter that uses key value database. currently DynamoDB -->
      <reporter>com.intuit.tank.reporting.db.DatabaseResultsReporter</reporter>
      <reader>com.intuit.tank.reporting.db.DatabaseResultsReader</reader>
      <config></config>
      
    </provider>
      
    <!-- Use this for Rest reporting directly to the controller. 
      Only for standalone or all in one. will over tax the controller if used for large load -->
    <!-- <provider>
      <reporter>com.intuit.tank.reporting.rest.RestResultsReporter</reporter>
      <reader>com.intuit.tank.reporting.rest.RestResultsReader</reader>
    </provider> -->
  </reporting>

  <agent-config>
    <!-- Times used when calculating estimated run time -->
    <duration-simulation>
      <simulation for="post" min="500" max="1000" />
      <simulation for="get" min="50" max="300" />
      <simulation for="process" min="10" max="50" />
    </duration-simulation>

    <!-- Where to store csv files on the agent -->
    <agent-data-file-storage>/tmp</agent-data-file-storage>

    <!-- port that controller talks to agent on -->
    <agent-http-port>8090</agent-http-port>

    <!-- Max size of response body to log on error -->
    <max-body-report-size>5000</max-body-report-size>

    <!-- time to wait before re-establishing ssl -->
    <ssl-timeout>360000</ssl-timeout>

    <!-- connection timeout setting. set to zero to not have a timeout -->
    <connection-timeout>15000</connection-timeout>

    <status_report_interval_milis>30000</status_report_interval_milis>

    <!-- Max response time before waiting additional time between requests. 
      Helps prevent backups if server is running too slow. (in ms.) -->
    <max-response-time>5000</max-response-time>

    <!-- Max time to wait if response was too slow. Helps prevent backups 
      if server is running too slow. (in ms.) -->
    <max-failed-wait-time>180000</max-failed-wait-time>

    <!-- Max amount of time after simulation time to run the test. -->
    <over-simulation-max-time>7200000</over-simulation-max-time>

    <!-- set to true to log each post request. -->
    <log-post-request>false</log-post-request>

    <!-- set to true to log each post response. -->
    <log-post-response>false</log-post-response>

    <!-- set to true to log each variable set or unset. -->
    <log-variables>false</log-variables>

    <!-- how long of a period to calculate the TPS -->
    <tps-period>30</tps-period>

    <!-- Mime type rgex for logging of response body on error. -->
    <valid-mime-types>
      <mime-type-regex>.*text.*</mime-type-regex>
      <mime-type-regex>.*json.*</mime-type-regex>
      <mime-type-regex>.*xml.*</mime-type-regex>
    </valid-mime-types>

    <!-- add any headers that should be added to each request -->
    <request-headers>
      <header key="test_flag">test_flag</header>
    </request-headers>

    <!-- configured TankHttpClients. -->
    <tank-http-clients>
      <tank-client name="Apache HttpClient 3.1">com.intuit.tank.httpclient3.TankHttpClient3</tank-client>
      <tank-client name="Apache HttpClient 4.5">com.intuit.tank.httpclient4.TankHttpClient4</tank-client>
      <tank-client name="OkHttp Client 2.5">com.intuit.tank.okhttpclient.TankOkHttpClient</tank-client>
    </tank-http-clients>
    <default-tank-client>Apache HttpClient 3.1</default-tank-client>

  </agent-config>


  <vm-manager>
    <default-region>US_EAST</default-region>
    <!-- <default-region>US_WEST_1</default-region> -->
    <!-- set to true to default use of available eips for agents -->
    <use-agent-elastic-ips>false</use-agent-elastic-ips>
    <!-- reserved eips will not be used -->
    <reserved-elastic-ips>
      <!-- <eip>0.0.0.0</eip> -->
    </reserved-elastic-ips>

    <!-- Default instance description items. can be overridden in instance 
      descriptions. -->
    <default-instance-description>
      <security-group>security_group</security-group>
      <keypair>myKey</keypair>
        <!--  if using roles. recommended over using security keys -->
        <!-- <iam-role>role</iam-role> -->
        <!--  optional if running ni a subnet in a vpc, use the subnetIds -->
        <!-- <vpc-subnet>subnet-472b9f30</vpc-subnet>
        <security-group-ids>sg-9f9936fb</security-group-ids> -->
      
      <reuse-instances>false</reuse-instances>
    </default-instance-description>

    <!-- Credentials for the cloud provider -->
    <credentials type="amazon">
      <!-- Set credentials via system or java properties. -->
      <secret-key-id-property>AWS_SECRET_KEY_ID</secret-key-id-property>
      <secret-key-property>AWS_SECRET_KEY</secret-key-property>
      <!-- Set if you want to specifiy credentials directly here. less secure! -->
      <!-- <secret-key-id>[AWS_SECRET_KEY_ID]</secret-key-id> <secret-key>[AWS_SECRET_KEY]</secret-key> -->
      <!-- Set if you need a proxy to talk to amazon services -->
      <!-- <proxy-host></proxy-host> <proxy-port>80</proxy-port> -->
    </credentials>
    
    <!-- Include any tags to add to agent instances. note that a maximum of 10 tags is allowed and tank uses 3 tags. -->
    <tags>
        <tag name="admin_contact">tank_admin</tag>
    </tags>

    <!-- Instance descriptions for regions -->
    <instance-descriptions region="US_WEST_1">
      <instance-descripion name="AGENT">
        <ami>[AMI-ID]</ami>
        <keypair>[KEYPAIR]</keypair>
                <!--  if using roles. recommended over using security keys -->
        <!-- <iam-role>role</iam-role> -->
        <!--  optional if running ni a subnet in a vpc, use the subnetIds -->
        <!-- <vpc-subnet>subnet-472b9f30</vpc-subnet>
        <security-group-ids>sg-9f9936fb</security-group-ids> -->
      </instance-descripion>
    </instance-descriptions>

    <instance-descriptions region="US_EAST">
      <instance-descripion name="AGENT">
        <ami>[AMI-ID]</ami>
        <keypair>[KEYPAIR]</keypair>
        <!--  if using roles. recommended over using security keys -->
        <!-- <iam-role>role</iam-role> -->
        <!--  optional if running ni a subnet in a vpc, use the subnetIds -->
        <!-- <vpc-subnet>subnet-472b9f30</vpc-subnet>
        <security-group-ids>sg-9f9936fb</security-group-ids> -->
      </instance-descripion>
    </instance-descriptions>

    <!-- used to set agent instnces and calculate costs. -->
    <instance-types type="amazon">
      <type name="c3.large" cost=".105" users="500" cpus="2" ecus="7"
        mem="3.75" jvmArgs="-Xms2560m -Xmx2560m" />
      <type name="c3.xlarge" cost=".21" users="2000" cpus="4" ecus="14"
        mem="7.5" jvmArgs="-Xms6g -Xmx6g" />
      <type name="c3.2xlarge" cost=".42" users="4000" cpus="8"
        ecus="28" mem="15" default="true" jvmArgs="-Xms12g -Xmx12g" />
      <type name="c3.4xlarge" cost=".84" users="8000" cpus="16"
        ecus="55" mem="30" jvmArgs="-Xms125g -Xmx25g" />
      <type name="c3.8xlarge" cost="1.68" users="16000" cpus="32"
        ecus="108" mem="60" jvmArgs="-Xms50g -Xmx50g" />
    </instance-types>


    <!-- watchdog is used to check if all agents start correctly. -->
    <watchdog>
      <!-- The maximum amount of time to wait for the agents to start before 
        restarting -->
      <max-time-for-agent-start>5m</max-time-for-agent-start>
      <!-- The maximum amount of time to wait for the agents to report to 
        the controller before restarting -->
      <max-time-for-agent-report>10m</max-time-for-agent-report>
      <!-- the maximum number of restarts before stopping test -->
      <max-restarts>2</max-restarts>
      <!-- The amount of time to wait between checking for agent start -->
      <sleep-time-between-check>30s</sleep-time-between-check>
    </watchdog>

    <!--Configure the results database implementation if reporting is configured via com.intuit.tank.reporting.db.DatabaseResultsReporter -->
      <results>
      <config>
        <write-capacity>50</write-capacity>
        <read-capacity>10</read-capacity>
      </config>
      <provider>com.intuit.tank.persistence.databases.AmazonDynamoDatabaseDocApi</provider>
      <!-- <provider>com.intuit.tank.persistence.databases.AmazonSimpleDatabase</provider> -->
    </results>
  </vm-manager>

  <security>
    <!-- groups that can be assigned to users. set isDefault to tru to have 
      these selected when creating new users -->
    <groups>
      <group>admin</group>
      <group isDefault="true">user</group>
      <group>script-manager</group>
      <group>project-manager</group>
      <group>job-manager</group>
      <group isDefault="true">guest</group>
    </groups>
    <!-- restrictions set which groups can perform which actions. -->
    <restrictions>
      <!-- Project permissions -->
      <restriction operation="CREATE_PROJECT">
        <groups>
          <group>user</group>
          <group>project-manager</group>
        </groups>
      </restriction>
      <restriction operation="DELETE_PROJECT">
        <groups>
          <group>project-manager</group>
        </groups>
      </restriction>
      <restriction operation="EDIT_PROJECT">
        <groups>
          <group>project-manager</group>
        </groups>
      </restriction>
      <!-- Script permissions -->
      <restriction operation="CREATE_SCRIPT">
        <groups>
          <group>user</group>
          <group>script-manager</group>
        </groups>
      </restriction>
      <restriction operation="DELETE_SCRIPT">
        <groups>
          <group>script-manager</group>
        </groups>
      </restriction>
      <restriction operation="EDIT_SCRIPT">
        <groups>
          <group>script-manager</group>
        </groups>
      </restriction>
      <!-- Filter permissions -->
      <restriction operation="CREATE_FILTER">
        <groups>
          <group>user</group>
          <group>script-manager</group>
        </groups>
      </restriction>
      <restriction operation="DELETE_FILTER">
        <groups>
          <group>script-manager</group>
        </groups>
      </restriction>
      <restriction operation="EDIT_FILTER">
        <groups>
          <group>script-manager</group>
        </groups>
      </restriction>
      <!-- Data File permissions -->
      <restriction operation="CREATE_DATAFILE">
        <groups>
          <group>user</group>
          <group>script-manager</group>
          <group>project-manager</group>
        </groups>
      </restriction>
      <restriction operation="DELETE_DATAFILE">
        <groups>
          <group>script-manager</group>
          <group>project-manager</group>
        </groups>
      </restriction>
      <!-- Job permissions -->
      <restriction operation="CONTROL_JOB">
        <groups>
          <group>job-manager</group>
          <group>project-manager</group>
        </groups>
      </restriction>
    </restrictions>
    <!-- Define users to be created on startup if they do not exist. -->
    <users>
      <user>
        <name>admin</name>
        <password>admin</password>
        <email>admin@example.com</email>
        <group>admin</group>
      </user>
    </users>
  </security>

  <!-- These are the scripts that get prepended to every extended script 
    filter. -->
  <logic-step>
    <insert-before><![CDATA[
// ######## Compatability mode for java 8. ##########
try {
   load("nashorn:mozilla_compat.js");
} catch (exception){}

// ######## Logging functions ##########

/**
 * prints the line to the output. will be log
 * 
 * @param line
 *            the line to print
 */
function logWithDate(line) {
    ioBean.println(new Date().toString + ": " + line);
}

/**
 * prints the line in info context.
 * 
 * @param line
 *            the line to print
 */
function log(line) {
    ioBean.println(line);
}
/**
 * prints the line in error context.
 * 
 * @param line
 *            the line to print
 */
function error(line) {
    ioBean.error(line);
}

/**
 * prints the line in debug context. Will be logged to console or test but not
 * to logs when in production.
 * 
 * @param line
 *            the line to print
 */
function debug(line) {
    ioBean.debug(line);
}

//######## Data Transformational functions ##########

function toJsonObj(text) {
    try {
        return JSON.parse(text);
    } catch(e) {
        error("Error parsing json: " + e);
    }
    return text;
}

function toJsonString(jsonObj) {
    try {
        return JSON.stringify(jsonObj\, null\, '\t');
    } catch(e) {
        error("Error converting json to string json: " + e);
    }
    return jsonObj;
}


//######## Data Retrieval functions ##########
/**
 * gets the com.intuit.tank.http.BaseRequest object of the last call made.
 * 
 * @return the request or null if no requests have been made
 */
function getRequest() {
    return ioBean.getInput("request");
}

/**
 * gets the com.intuit.tank.http.BaseResponse object of the last call made.
 * 
 * @return the response or null if no requests have been made
 * 
 */
function getResponse() {
    return ioBean.getInput("response");
}

/**
 * gets the request body as string if not binary
 * 
 * @return the body or empty string if null or binary
 */
function getResquestBody() {
    if (getRequest() != null) {
        return getRequest().getBody();
    }
    return "";
}

/**
 * gets the response body as string if not binary
 * 
 * @return the body or empty string if null or binary
 */
function getResponseBody() {
    if (getResponse() != null) {
    return getResponse().getBody();
    }
    return "";
}

/**
 * Returns the value of the variable or null if variable does not exist
 * 
 * @param key
 *            the variable name
 * @returns the variable value.
 */
function getVariable(key) {
    return ioBean.getInput("variables").getVariable(key);
}

/**
 * Sets the value of the variable.
 * 
 * @param key
 *            the variable name to set
 * @param value
 *            the value to set it to
 */
function setVariable(key\, value) {
    ioBean.getInput("variables").addVariable(key\, value);
}

//######## Result functions ##########

/**
 * jump to a group within the script with the specified name.
 * 
 * @param groupName
 *            the name of the group to go to. if the group does not exist\, it
 *            skips to next script.
 */
function gotoGroup(groupName) {
    setAction("goto " + groupName);
}

/**
 * restart the TestPlan from the start.
 */
function restartPlan() {
    setAction("restartPlan");
}

/**
 * aborts the current ScriptGroup and proceeds to the next.
 * 
 * @returns
 */
function abortScriptGroup() {
    setAction("abortScriptGroup");
}

/**
 * aborts the current Script and proceeds to the next.
 */
function abortScript() {
    setAction("abortScript");
}

/**
 * aborts the current group and proceeds to the next request after the current
 * group.
 */
function abortGroup() {
    setAction("abortGroup");
}

/**
 * terminates this user.
 */
function terminateUser() {
    setAction("terminateUser");
}

/**
 * sets the action in the output.
 */
function setAction(action) {
    ioBean.setOutput("action"\, action);
}

]]>
    </insert-before>

    <!-- these get added after the user input script. -->
    <append-after><![CDATA[

    ]]>
    </append-after>
  </logic-step>

</tank-settings>