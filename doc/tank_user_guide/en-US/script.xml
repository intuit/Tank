<?xml version="1.0" encoding="UTF-8"?>


<chapter id="script">
  <title>Scripts</title>
  <para>
    Scripts are accessed from the
    <code>Scripts</code>
    navigation link.
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/scripts/scripts_1.png" format="PNG" align="Center" />
      </imageobject>
    </mediaobject>
  </para>
  <para>
    A Intuit Tank performance script is a preset of steps that virtual users will execute during a load test. A step can
    be composed from one of the following step types:
    <itemizedlist>
      <listitem>
        HTTP Request
      </listitem>
      <listitem>
        Think Time
      </listitem>
      <listitem>
        Sleep Time
      </listitem>
      <listitem>
        Variable
      </listitem>
      <listitem>
        Clear Session
      </listitem>
      <listitem>
        Logic
      </listitem>
    </itemizedlist>
  </para>
  <para>In the Scripts section we will cover how to create and modify a Intuit Tank script. First we will go over the
    steps of
    creating a script by importing a proxy recording. The modifying portion will be broken into 2 parts. The
    first part
    will go through the general steps of editing a script (i.e. modifying requests, deleting requests and saving
    your
    changes). The second part will go over on how to add one of the 5 request types to a script.</para>

  <section>
    <title>Importing a recorded script</title>
    <para>
      There are two ways to generate a script: importing from a proxy recording or manually creating a script. This
      section will mainly focus on the importing method.
    </para>
    <note>
      <para>Currently Intuit Tank only supports Intuit Tank's own proxy recording tool. </para>
    </note>

    <orderedlist>
      <listitem>
        Click on the
        <code>New Script</code>
        icon which takes you to the Create Script form.
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/scripts/scripts_2.png" format="PNG" align="Center" />
          </imageobject>
        </mediaobject>
      </listitem>
      <listitem>
        Fill in the name and select from the appropriate product name.
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/scripts/scripts_3.png" format="PNG" align="Center" />
          </imageobject>
        </mediaobject>
      </listitem>
      <listitem>
        Click on the
        <code>Browse</code>
        button to select the recording file or the zip archive that contains the recording file. 
        If Creating a blank script just select the Blank Script radio button and skip this step.
        <note>If uploading a zipped recording, Intuit Tank will only extract the first one.tu</note>
      </listitem>
      <listitem>
        Select the appropriate Filter Groups and/or individual Filters. The Filters are used to transform the imported
        recording to a final Intuit Tank script. (See the Filters section for more details on Filters and Filters
        Group.)
      </listitem>
      <listitem>
        Click on the Save button. Once the Intuit Tank script is created, you will be taken back to
        the Scripts section
        and your script will appear at the top of the list.
      </listitem>
    </orderedlist>

  </section>

  <section>
    <title>Modifying a script</title>

    <para>Click on the name of the script of the edit icon of the script you wish to edit. This will take you to the
      edit script form.</para>

    <variablelist>
      <varlistentry>
        <term>Name</term>
        <listitem>
          <para>The name of the script. This is an in-place editor. Simply click the name once to enter edit mode.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Product</term>
        <listitem>
          <para>The name of the product this script belongs to.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Owner</term>
        <listitem>
          <para>The user who owns the script.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Comments</term>
        <listitem>
          <para>Comments are accessed by the comments button on the toolbar. 
          </para>
        </listitem>
      </varlistentry>

    </variablelist>

    <note>
      <para>Selection in script steps is different than other sections. Instead of check boxes, it uses a standard
        selection methods and highlights to indicate selection. To select Multiple use the shift key to select a
        range or
        the control key to select and de-select individual steps.</para>
    </note>

    <para>
      The toolbar has actions for inserting, deleting, and changing the order of the steps.
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/scripts/scripts_4.png" format="PNG" align="Center" />
        </imageobject>
      </mediaobject>
    </para>
    <note>
      <para>When inserting a step, the new step will be inserted before the first selected step. if nothing is
        selected,
        it will be inserted at the end of the script.</para>
    </note>
  </section>

  <section>
    <title>Reordering Steps</title>

    <orderedlist>
      <listitem>
        To move a step you will need to click on the button labeled
        <code>Reorder Steps</code>
        . A pop up window labeled Reorder Steps will appear.
      </listitem>
      <listitem>
        User the buttons to move steps up or down in the list. You can also drag the steps to the new order.
      </listitem>

      <listitem>
        Click on the Save button to save the new ordering.
      </listitem>
    </orderedlist>
    <para>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/scripts/scripts_5.png" format="PNG" align="Center" />
        </imageobject>
      </mediaobject>
    </para>
    <note>
      <para>
        The script is not saved to the database until you click
        <code>Save</code>
        in the main toolbar. Changes can be discarded at
        any time by clicking cancel or by navigating to another panel.
        In general you should periodically save your
        updates.
      </para>
    </note>
  </section>

  <section>
    <title>Variables</title>
    <para>Variables are used to store various values that can be used to parameterize requests (i.e. hostnames, query
      string, post data, etc.). You can define a variable to be set to a literal value or function. A variable can also
      be
      set by parsing the response or headers of a given request. When using variables in requests you need to add the
      @ symbol in
      front of the variable. This tells Intuit Tank to replace the variable with the actual value.</para>
    <orderedlist>
      <listitem>
        To add a variable, click on the button labeled
        <code>Variable</code>
        . The Variable dialog will pop up.
      </listitem>
      <listitem>
        In the
        <code>Key</code>
        field you will define your variable name.
      </listitem>

      <listitem>
        The
        <code>Value</code>
        field is where you define the actual value or function you use will associate with the variable.
      </listitem>
      <listitem>
        Click on the
        <code>Add</code>
        or
        <code>Save</code>
        button when done.
      </listitem>
    </orderedlist>
    
    <note>
        <para>
          You can cause the agent to use a Proxy Server for requests by setting a variable named 'TANK_HTTP_PROXY' in the format proxyHost:proxyport. e.g. myProxyserver:80
        </para>
      </note>
      
    <para>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/scripts/scripts_6.png" format="PNG" align="Center" />
        </imageobject>
      </mediaobject>
    </para>

  </section>

  <section>
    <title>Think Time and Sleep Time</title>
    <para>
      Think Time is used to simulate a real user's page to page transitions in an application. In Intuit Tank a
      random
      think time is generated based on the min and max values given. Sleep time is used when you wish to wait for
      a
      specific amount of time.
      <note>
        Think Time and Sleep Time are entered in milliseconds.
      </note>
    </para>
    <orderedlist>
      <listitem>
        To add a Think Time or Sleep Time, click on the appropriate button or the link to edit an existing one. The
        insert or edit dialog will pop up.
      </listitem>
      <listitem>
        In the
        <code>Key</code>
        field you will define your variable name.
      </listitem>

      <listitem>
        For Think Time you will need to enter the Minimum and Maximum time in miliseconds. For Sleep Time you just need
        to enter a single value.

      </listitem>
      <listitem>
        Click on the
        <code>Add</code>
        or
        <code>Save</code>
        button when done.
      </listitem>
    </orderedlist>
    <para>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/scripts/scripts_7.png" format="PNG" align="Center" />
        </imageobject>
      </mediaobject>
    </para>

  </section>

  <section>
    <title>Http Request</title>
    <para>
      In Intuit Tank a request is either a HTTP(S) GET or POST request. Before we go through the steps of adding a
      new request, we will go over what makes up the basic request. First will start with the fields that can make up a
      request:
    </para>
    <variablelist>

      <varlistentry>
        <term>Host</term>
        <listitem>
          <para>You can enter either the FQDN, IP address or variable for the hostname. When you use a variable you need
            to add the &amp; symbol at the beginning of the variable. (e.g. @webserver) You can specify the port by appending a :[port] to the host. e.g. server.domain.com:9001</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Protocol</term>
        <listitem>
          <para>Supported protocols HTTP or HTTPS</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Path</term>
        <listitem>
          <para>
            The path to the requested resource. The path can also be parameterize with variables.
            <example>
              #{rootContext}/ajax/logEmail
            </example>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Method</term>
        <listitem>
          <para>
            Supported methods GET or POST
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Query String</term>
        <listitem>
          <para>
            The query parameters expressed as key value pairs that get appended to the url.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Post Data</term>
        <listitem>
          <para>
            Parameters expressed as key value pairs that get posted in the body of the request.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Group</term>
        <listitem>
          <para>
            Allows you to group requests under a label.
            Grouping is used with "On Failure". Note: This field is
            optional.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Logging</term>
        <listitem>
          <para>
            This field is used to gather response
            times on a specific request. Note: This field is
            optional.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>On Failure</term>
        <listitem>
          <para>
            Defines what action to take next when a
            response validation has failed. The following are
            the 5 actions
            that can be taken by the tool when validation has
            failed:
            o Abort Script, goto next Script (Default) –
            The
            virtual
            user will skip to the next script defined in the
            project. If
            there is only one script the virtual user
            will start
            from over from the top of the script.
            o Continue to
            next request – Execute next request.
            o Skip
            remaining
            requests in
            a group – Will execute the next step after the
            last request with the group label
            o Goto
            Group – Jumps to
            the first
            step with the group label
            o Terminate user – The
            virtual user is terminated.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Name</term>
        <listitem>
          <para>
            Allows a user to
            uniquely label
            a request. (i.e. Login request, Signout
            request or Print Request). Note:
            This
            field is optional.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
    <para>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/scripts/scripts_8.png" format="PNG" align="Center" />
        </imageobject>
      </mediaobject>
    </para>

    <orderedlist>
      <listitem>
        To add a Request, click on the appropriate button or the link to edit an existing one. The
        insert or edit dialog
        will pop up.
      </listitem>
      <listitem>
        Fill in the appropriate top level attributes such as Host, Path, Name, etc.
      </listitem>
      <listitem>
        <para>For each of the tabs, you can add or modify the key value pairs.</para>
        <note>
          Key and Value are in-place edit components. click on them to change their value and click the check mark
          to
          accept the change or the 'X' to revert.
        </note>
        <itemizedlist>
          <listitem>
            Request Headers
            <note>
              <para>
                Not all Heders are re-played. The following are filtered out:
                <itemizedlist>
                  <listitem>
                    Host
                  </listitem>
                  <listitem>
                    Cookie
                  </listitem>
                  <listitem>
                    Connection
                  </listitem>
                  <listitem>
                    If-None-Match
                  </listitem>
                  <listitem>
                    If-Modified-Since
                  </listitem>
                  <listitem>
                    Content* (Content-Type, Content-Length)
                  </listitem>
                </itemizedlist>
              </para>
            </note>
          </listitem>
          <listitem>
            Response Header
            <para>Response Headers are read only. They are here to help you in creating validation or assignemnts.
            </para>
          </listitem>
          <listitem>
            Request Cookies
            <para>Cookies lets you see which cookies were set when the request was made. However, only cookies that are
              set from variables are replayed.</para>
          </listitem>
          <listitem>
            Response Cookies
            <para>Response Cookies are read only.
            </para>
          </listitem>
          <listitem>
            Query String
            <para>Used primarily with GET requests.</para>
          </listitem>
          <listitem>
            Post Data
            <para>Only valid for POST requests.</para>
          </listitem>
          <listitem>
            Validation
            <para>Perform validation specified. If validation fails, the On Fail action is performed. Key is the xpath or expression for the value.</para>
            <note>
              <para>
                Two Synthetic headers can be validated as well:
                <itemizedlist>
                  <listitem>
                    HTTPRESPONSEMESSAGE - The http response message. e.g. OK or Not Found
                  </listitem>
                  <listitem>
                    HTTPRESPONSECODE - The http response code. e.g. 200 or 404
                  </listitem>
                </itemizedlist>
              </para>
            </note>
          </listitem>
          <listitem>
            Assignments
            <para>Assign values to variables for use in other script steps. Key is the variable name and value is the
              xpath or expression for the value.</para>
              <note>
              <para>
                The Response body is added as the variable RESPONSE_BODY for requests that return a text-based resonse and can be used in expressions.
              </para>
            </note>
          </listitem>

        </itemizedlist>
      </listitem>





      <listitem>
        Click on the
        <code>Save</code>
        button when done.
      </listitem>
    </orderedlist>
    

  </section>

  <section>
    <title>Clear Session</title>    
    <para>
      Inserting this step clears the session, comparable to closing and re-opening the browser. This accomplishes the following:
    </para>
    <itemizedlist>
      <listitem>
        Clears cookies
      </listitem>
      <listitem>
        Clears the cache
      </listitem>
    </itemizedlist>
  </section>
  
  <section>
    <title>Logic</title>    
    <para>
      Inserting this step allows the user to use javascript to control the flow of the script, change varaible values, or perform 
      any logic that is too complex for the normal operations.
    </para>
    <para>Logic step scripts are written in javascript. They have access to the following objects:</para>
    <variablelist>
      <varlistentry>
        <term>Variables</term>
        <listitem>
          <para>The current variables in the test plan execution.</para>
        </listitem>
      </varlistentry>
      
      <varlistentry>
        <term>Request</term>
        <listitem>
          <para>The previous request in the test plan execution.</para>
        </listitem>
      </varlistentry>
      
      <varlistentry>
        <term>Response</term>
        <listitem>
          <para>The previous response in the test plan execution.</para>
        </listitem>
      </varlistentry>
      
    </variablelist>
    <note>
      <para>There are functions that are added to each script for accessing these values.</para>
    </note>

    <para>Control flow is controlled by setting the 'action' output parameter in the ioBean. Handled values are:</para>
    
    <variablelist>
      <varlistentry>
        <term>goto:[groupName]</term>
        <listitem>
          <para>Jump to a group within the script with the specified name.</para>
        </listitem>
      </varlistentry>
      
      <varlistentry>
        <term>restartPlan</term>
        <listitem>
          <para>Restart the test plan from the start.</para>
        </listitem>
      </varlistentry>
      
      <varlistentry>
        <term>abortScriptGroup</term>
        <listitem>
          <para>Aborts the current script group and proceeds to the next script group.</para>
        </listitem>
      </varlistentry>
      
      <varlistentry>
        <term>abortScript</term>
        <listitem>
          <para>Aborts the current script and proceeds to the next script.</para>
        </listitem>
      </varlistentry>
      
      <varlistentry>
        <term>abortGroup</term>
        <listitem>
          <para>Aborts the current group within a script and proceeds to the next request after the current group.</para>
        </listitem>
      </varlistentry>
      
      <varlistentry>
        <term>terminateUser</term>
        <listitem>
          <para>Terminates the current user.</para>
        </listitem>
      </varlistentry>
      
    </variablelist>
    
    <note>
      <para>There are functions that are added to each script for accessing these values.</para>
    </note>
    
            
    <para>The following functions are added to each script before it is run and are available for use.</para>
    <programlisting language="javascript">
// ######## Logging functions ##########

/**
 * prints the line to the output. will be log
 * 
 * @param line
 *            the line to print
 */
function logWithDate(line) {
    ioBean.println(new Date().toString + ": " + line);
}

/**
 * prints the line in info context.
 * 
 * @param line
 *            the line to print
 */
function log(line) {
    ioBean.println(line);
}
/**
 * prints the line in error context.
 * 
 * @param line
 *            the line to print
 */
function error(line) {
    ioBean.error(line);
}

/**
 * prints the line in debug context. Will be logged to console or test but not
 * to logs when in production.
 * 
 * @param line
 *            the line to print
 */
function debug(line) {
    ioBean.debug(line);
}

//######## Data Transformational functions ##########

function toJsonObj(text) {
    try {
        return JSON.parse(text);
    } catch(e) {
        error("Error parsing json: " + e);
    }
    return text;
}

function toJsonString(jsonObj) {
    try {
        return JSON.stringify(jsonObj, null, '\t');
    } catch(e) {
        error("Error converting json to string json: " + e);
    }
    return jsonObj;
}


//######## Data Retrieval functions ##########
/**
 * gets the com.intuit.tank.http.BaseRequest object of the last call made.
 * 
 * @return the request or null if no requests have been made
 */
function getRequest() {
    return ioBean.getInput("request");
}

/**
 * gets the com.intuit.tank.http.BaseResponse object of the last call made.
 * 
 * @return the response or null if no requests have been made
 * 
 */
function getResponse() {
    return ioBean.getInput("response");
}

/**
 * gets the request body as string if not binary
 * 
 * @return the body or empty string if null or binary
 */
function getResquestBody() {
    if (getRequest() != null) {
        return getRequest().getBody();
    }
    return "";
}

/**
 * gets the response body as string if not binary
 * 
 * @return the body or empty string if null or binary
 */
function getResponseBody() {
    if (getResponse() != null) {
    return getResponse().getBody();
    }
    return "";
}

/**
 * Returns the value of the variable or null if variable does not exist
 * 
 * @param key
 *            the variable name
 * @returns the variable value.
 */
function getVariable(key) {
    return ioBean.getInput("variables").getVariable(key);
}

/**
 * Sets the value of the variable.
 * 
 * @param key
 *            the variable name to set
 * @param value
 *            the value to set it to
 */
function setVariable(key, value) {
    ioBean.getInput("variables").addVariable(key, value);
}

//######## Result functions ##########

/**
 * jump to a group within the script with the specified name.
 * 
 * @param groupName
 *            the name of the group to go to. if the group does not exist, it
 *            skips to next script.
 */
function gotoGroup(groupName) {
    setAction("goto " + groupName);
}

/**
 * restart the TestPlan from the start.
 */
function restartPlan() {
    setAction("restartPlan");
}

/**
 * aborts the current ScriptGroup and proceeds to the next.
 * 
 * @returns
 */
function abortScriptGroup() {
    setAction("abortScriptGroup");
}

/**
 * aborts the current Script and proceeds to the next.
 */
function abortScript() {
    setAction("abortScript");
}

/**
 * aborts the current group and proceeds to the next request after the current
 * group.
 */
function abortGroup() {
    setAction("abortGroup");
}

/**
 * terminates this user.
 */
function terminateUser() {
    setAction("terminateUser");
}

/**
 * sets the action in the output.
 */
function setAction(action) {
    ioBean.setOutput("action", action);
}
</programlisting>
  </section>

</chapter>
