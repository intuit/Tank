<?xml version="1.0" encoding="UTF-8"?>

<chapter id="newfunctions">
  <title>Functions and Variables</title>

  <para> Functions can be used to manipulate data during test execution. They can be used anywhere in place of a Value.
  </para>
  <para>Functions and Variables both use the same format. They start with either a # or $ and then are enclosed in
    parentheses. e.g. #{functionType.function(param, param2)} or ${functionType.function(param, param2)}.
    Variables have
    no parentheses. e.g. #{varName}
  </para>
  <para>Functions or variables can be nested in other functions. e.g.
    #{stringFunctions.toBase64(ioFunctions.getFileData(fileName)} In this example the variable is fileName which is
    passed
    to the getFileDataFunction which is passed to the toBase64 function.
  </para>
  <para>
    There are 6 built in function types.
    <itemizedlist>
      <listitem>
        ioFunctions
      </listitem>
      <listitem>
        stringFunctions
      </listitem>
      <listitem>
        dateFunctions
      </listitem>
      <listitem>
        monetaryFunctions
      </listitem>
      <listitem>
        numericFunctions
      </listitem>
      <listitem>
        taxFunctions
      </listitem>
    </itemizedlist>

  </para>


  <example>
    <title>Using Functions</title>
    <para>
      Declaring the function
      <code>#{stringFunctions.concat('Intuit ', 'Tank ',' Rocks')}</code>
      would yield "Intuit Tank Rocks".
    </para>

    <para>
      Declaring the function
      <code>#{numericFunctions.mod(authId, 10)}</code>
      with the variable ${authId} defined as 51 would result in 51 % 10 = 1.
    </para>

  </example>

  <section>
    <title>ioFunctions</title>
    <variablelist>

      <varlistentry>
        <term>getCSVData(String fileName)</term>
        <listitem>
          <para>
            Gets the value of the first columnNumber from the specified csv file. equivalent of calling
            getCSVData(fileName, 0, false)
            <orderedlist>
              <title>Parameters</title>
              <listitem>
                fileName: String indicating the name of the csv file to read data from.
              </listitem>

            </orderedlist>
            <example>
              <code>#{ioFunctions.getCSVData('myData.csv')}</code>
              returns the first column in the csv file myData.csv.
            </example>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>getCSVData(String fileName, int columnIndex)</term>
        <listitem>
          <para>
            Gets the value of the specified columnNumber from the specified csv file. equivalent of calling
            getCSVData(fileName, columnIndex, false)
            <orderedlist>
              <title>Parameters</title>
              <listitem>
                fileName: String indicating the name of the csv file to read data from.
              </listitem>
              <listitem>
                columnIndex: Integer Zero indexed column number.
              </listitem>
            </orderedlist>
            <example>
              <code>#{ioFunctions.getCSVData('myData.csv', 1, true)}</code>
              returns the second column in the csv file myData.csv.
            </example>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>getCSVData(String fileName, int columnIndex, boolean loop)</term>
        <listitem>
          <para>
            Gets the value of the specified columnNumber from the specified csv file.
            <orderedlist>
              <title>Parameters</title>
              <listitem>
                fileName: String indicating the name of the csv file to read data from.
              </listitem>
              <listitem>
                columnIndex: Integer Zero indexed column number.
              </listitem>
              <listitem>
                loop: Boolean true to go back to the first line after all lines are read.
              </listitem>
            </orderedlist>
            <example>
              <code>#{ioFunctions.getCSVData('myData.csv', 1, true)}</code>
              returns the second column in the csv file myData.csv.
            </example>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>getFileData(String fileName)</term>
        <listitem>
          <para>
            Reads the specified file and returns it as a String.
            <orderedlist>
              <title>Parameters</title>
              <listitem>
                fileName: String indicating the name of the csv file to read data from.
              </listitem>
            </orderedlist>
            <example>
              <code>#{ioFunctions.getFileData('myData.txt')}</code>
              returns the contents of the file myData.txt as a String
            </example>
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>getFileBytes(String fileName)</term>
        <listitem>
          <para>
            Reads the specified file and returns it as a byte array (byte[]). This function can only be used as input to another function that returns a String such as toBase64.
            <orderedlist>
              <title>Parameters</title>
              <listitem>
                fileName: String indicating the name of the csv file to read data from.
              </listitem>
            </orderedlist>
            <example>
              <code>#{ioFunctions.getFileBytes('myData.txt')}</code>
              returns the contents of the file myData.txt as a String
            </example>
          </para>
        </listitem>
      </varlistentry>

    </variablelist>
  </section>

  <section>
    <title>String Functions</title>
    <variablelist>
      <varlistentry>
        <term>concat(String ... values)</term>
        <listitem>
          <para>
            Concatenates the given strings
            <orderedlist>
              <title>Parameters</title>
              <listitem>
                values: Strings(comma seperated) The strings to concatenate
              </listitem>
            </orderedlist>
            <example>
              <code>#{stringFunctions.concat('Turbo', 'Scale', ' Rocks')}</code>
              will return Intuit Tank Rocks
            </example>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>substring(String subject, int start, int stop)</term>
        <listitem>
          <para>
            Returns a new string that is a substring of subject. The substring begins at the specified start and
            extends
            to the character at index stop - 1. Thus the length of the substring is stop-start.
            <orderedlist>
              <title>Parameters</title>
              <listitem>
                subject: String the string from which the substring is to be found (required)
              </listitem>
              <listitem>
                start: Integer the start index for the substring(inclusive) (required)
              </listitem>
              <listitem>
                stop: Integer the index at which to end the substring(exclusive) (optional)
              </listitem>
            </orderedlist>
            <example>
              <code>#{stringFunctions.substring('hello world', 6)}</code>
              returns world and
              <code>#{stringFunctions.substring('hello world', 0, 5)}</code>
              returns hello
            </example>
          </para>
        </listitem>
      </varlistentry>
      
      <varlistentry>
        <term>substringBetween(String subject, String open, String close, int index)</term>
        <listitem>
          <para>
            Returns the String that is nested in between two Strings.
            <orderedlist>
              <title>Parameters</title>
              <listitem>
                subject: String the string from which the substring is to be found (required)
              </listitem>
              <listitem>
                open: the String before the substring, may be null (if null will return the substring before the first occurance of the close param) (required)
              </listitem>
              <listitem>
                close: the String after the substring, may be null (if null will return the substring after the last occurance of the open param) (required)
              </listitem>
              <listitem>
                index:  the zero based index of the string to return. (optional)
              </listitem>
            </orderedlist>
            <example>
              <code>#{stringFunctions.substringBetween('yabcz', 'y', 'z')}</code>
              returns abc and
              <code>#{stringFunctions.substringBetween('yabcz ydefz', 'y', 'z', 1)}</code>
              returns def
            </example>
          </para>
        </listitem>
      </varlistentry>
      
      
      <varlistentry>
        <term>randomAlphaLower(int length)</term>
        <listitem>
          <para>
            Generates a random string consisting of lower case alphabets of given length
            <orderedlist>
              <title>Parameters</title>
              <listitem>
                length: Integer the length of the random string
              </listitem>
            </orderedlist>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>randomAlphaUpper(int length)</term>
        <listitem>
          <para>
            Generates a random string consisting of upper case alphabets of given length
            <orderedlist>
              <title>Parameters</title>
              <listitem></listitem>
            </orderedlist>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>randomAlphaMixed(int length)</term>
        <listitem>
          <para>
            Generates a random string consisting of lower and upper case alphabets of given length
            <orderedlist>
              <title>Parameters</title>
              <listitem>
                length: Integer the length of the random string
              </listitem>
            </orderedlist>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>randomAlphaNumeric(int length)</term>
        <listitem>
          <para>
            Generates a random string consisting of numerals of given length
            <orderedlist>
              <title>Parameters</title>
              <listitem>
                length: Integer the length of the random string
              </listitem>
            </orderedlist>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>randomAlphaSpecial(int length)</term>
        <listitem>
          <para>
            Generates a random string consisting of special characters of given length
            <orderedlist>
              <title>Parameters</title>
              <listitem>
                length: Integer the length of the random string
              </listitem>
            </orderedlist>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>randomAlphaMixedNumeric(int length)</term>
        <listitem>
          <para>
            Generates a random string consisting of lower and upper case alphabets and numerals of given length
            <orderedlist>
              <title>Parameters</title>
              <listitem>
                length: Integer the length of the random string
              </listitem>
            </orderedlist>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>randomAlphaMixedSpecial(int length)</term>
        <listitem>
          <para>
            Generates a random string consisting of lower and upper case alphabets and special characters of given
            length
            <orderedlist>
              <title>Parameters</title>
              <listitem>
                length: Integer the length of the random string
              </listitem>
            </orderedlist>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>randomAlphaMixedNumericSpecial(int length)</term>
        <listitem>
          <para>
            Generates a random string consisting of lower and upper case alphabets, numerals and special characters of
            given length
            <orderedlist>
              <title>Parameters</title>
              <listitem>
                length: Integer the length of the random string
              </listitem>
            </orderedlist>
          </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term>userIdDate(int prefixLength, String format)</term>
        <listitem>
          <para>
            Generates a Random String suitable for a user ID by combining a random character string and a date
            <orderedlist>
              <title>Parameters</title>
              <listitem>
                prefixLength: Integer (required) The number of characters to use for the prefix.
              </listitem>
              <listitem>
                format: String (required) The date format string to use. 
              </listitem>
            </orderedlist>
            <example>
              <code>#{stringFunctions.userIdDate(4,'yyyy-MM-dd')}</code>
              produces 'GdGE2011-11-15' on November 15, 2011
            </example>
          </para>
        </listitem>
      </varlistentry>
      
      <varlistentry>
        <term>userIdFromDate(int prefixLength, String format)</term>
        <listitem>
          <para>
            Generates a Random String suitable for a user ID by combining a random character string and a date
            <orderedlist>
              <title>Parameters</title>
              <listitem>
                prefixLength: Integer (required) The number of characters to use for the prefix.
              </listitem>
              <listitem>
                format: String (required) The date format string to use. 
              </listitem>
            </orderedlist>
            <example>
              <code>#{stringFunctions.userIdFromDate(4,'yyyy-MM-dd')}</code>
              produces 'GdGE2011-11-15' on November 15, 2011
            </example>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>userIdFromRange(int minId, int maxId)</term>
        <listitem>
          <para>
            Generates a Integer user Id from the given range. Will distribute these ids equally among the different
            agents.
            <orderedlist>
              <title>Parameters</title>
              <listitem>
                minId: Integer (required) The minmum id of the range.
              </listitem>
              <listitem>
                maxId: Integer (required) The maximum id of the range.
              </listitem>
            </orderedlist>
            <example>
              <code>#{stringFunctions.userIdFromRange(1,1000)}</code>
              produces an unique integer between 1 and 1000
            </example>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>toBase64(String toEncode)</term>
        <listitem>
          <para>
            Will encode the given string to base64 format
            <orderedlist>
              <title>Parameters</title>
              <listitem>
                toEncode: String the string to base 64 encoding
              </listitem>
            </orderedlist>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>fromBase64(String toDecode)</term>
        <listitem>
          <para>
            Will decode the given string from base64 format
            <orderedlist>
              <title>Parameters</title>
              <listitem>
                toDecode: String the base64 string to decode
              </listitem>
            </orderedlist>
          </para>
        </listitem>
      </varlistentry>
     
      <varlistentry>
        <term>urlEncode(String toEncode)</term>
        <listitem>
          <para>
            Will encode the given string using URLEncoder
            <orderedlist>
              <title>Parameters</title>
              <listitem>
                toEncode: String the string to encode
              </listitem>
            </orderedlist>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>urlDecode(String toDecode)</term>
        <listitem>
          <para>
            Will decode the given string Using URLDecoder
            <orderedlist>
              <title>Parameters</title>
              <listitem>
                toDecode: String the encoded string to decode
              </listitem>
            </orderedlist>
          </para>
        </listitem>
      </varlistentry>

    </variablelist>
  </section>

  <section>
    <title>Date Functions</title>
    <variablelist>

      <varlistentry>
        <term>addDays(int days, String format)</term>
        <listitem>
          <para>
            Adds days to the current date.
            <orderedlist>
              <title>Parameters</title>
              <listitem>
                days: Integer The number of days. Pass in a negative value to subtract days.
              </listitem>
              <listitem>
                format: String The date format string to use. If empty, will use default for locale.
              </listitem>
            </orderedlist>
            <example>
              <code>#{dateFunctions.addDays(5,'yyyy-MM-dd')}</code>
              produces '2011-11-20' on November 15, 2011
            </example>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>addDaysUTC(int days, String format)</term>
        <listitem>
          <para>
            Adds days to the current date in UTC timezone.
            <orderedlist>
              <title>Parameters</title>
              <listitem>
                days: Integer The number of days. Pass in a negative value to subtract days.
              </listitem>
              <listitem>
                format: String The date format string to use. Can use predefined constants like 'ISO_UTC', 'ISO_UTC_NO_MS', or custom format. If empty, will use default ISO format.
              </listitem>
            </orderedlist>
            <example>
              <code>#{dateFunctions.addDaysUTC(5,'ISO_UTC')}</code>
              produces '2025-08-23T22:11:28.600Z' on August 18, 2025
            </example>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>currentDate(String format, String timeZone)</term>
        <listitem>
          <para>
            Current Date. Get the current date.
            <orderedlist>
              <title>Parameters</title>
              <listitem>
                format: String The date format string to use. If empty, will use default for locale.
              </listitem>
              <listitem>
                timeZone: String (optional) The timezone to use. ()e.g. 'PST', 'America/Los_Angeles', or 'GMT'). If empty, will use default for locale.
              </listitem>
            </orderedlist>
            <example>
              <code>#{dateFunctions.currentDate('yyyy-MM-dd', 'PST')}</code>
              produces '2011-11-15' on November 15, 2014
            </example>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>currentDateTime(String format)</term>
        <listitem>
          <para>
            Current Date and Time. Get the current date and time in local timezone.
            <orderedlist>
              <title>Parameters</title>
              <listitem>
                format: String The date and time format string to use. If empty, will use 'yyyy-MM-dd HH:mm:ss'.
              </listitem>
            </orderedlist>
            <example>
              <code>#{dateFunctions.currentDateTime('yyyy-MM-dd HH:mm:ss')}</code>
              produces '2025-08-18 22:11:28' on August 18, 2025
            </example>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>currentUTC(String format)</term>
        <listitem>
          <para>
            Current UTC Date and Time. Get the current date and time in UTC timezone.
            <orderedlist>
              <title>Parameters</title>
              <listitem>
                format: String The date and time format string to use. Can use predefined constants like 'ISO_UTC', 'ISO_UTC_NO_MS', or custom format. If empty, will use default ISO format.
              </listitem>
            </orderedlist>
            <example>
              <code>#{dateFunctions.currentUTC('ISO_UTC')}</code>
              produces '2025-08-18T22:11:28.600Z'
            </example>
            <para>
              <emphasis>Predefined UTC Format Constants:</emphasis>
              <itemizedlist>
                <listitem>ISO_UTC: <code>yyyy-MM-dd'T'HH:mm:ss.SSS'Z'</code> (e.g., 2025-08-18T22:11:28.600Z)</listitem>
                <listitem>ISO_UTC_NO_MS: <code>yyyy-MM-dd'T'HH:mm:ss'Z'</code> (e.g., 2025-08-18T22:11:28Z)</listitem>
                <listitem>ISO_UTC_OFFSET: <code>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</code> (e.g., 2025-08-18T22:11:28.600+00:00)</listitem>
                <listitem>ISO_UTC_DATE: <code>yyyy-MM-dd</code> (e.g., 2025-08-18)</listitem>
                <listitem>ISO_UTC_TIME: <code>HH:mm:ss.SSS'Z'</code> (e.g., 22:11:28.600Z)</listitem>
                <listitem>RFC_1123: <code>EEE, dd MMM yyyy HH:mm:ss zzz</code> (e.g., Mon, 18 Aug 2025 22:11:28 GMT)</listitem>
              </itemizedlist>
            </para>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>currentTimeMilis()</term>
        <listitem>
          <para>
            Gets the current Time in miliseconds since January 1, 1970. (Unix epoch time)
            
            <example>
              <code>#{dateFunctions.currentTimeMilis()}</code>
              produces a long number like '1357842009812'
            </example>
          </para>
        </listitem>
      </varlistentry>

    </variablelist>
  </section>

  <section>
    <title>Monetary Functions</title>
    <variablelist>

      <varlistentry>
        <term>randomPositive(int length)</term>
        <listitem>
          <para>
            Gets a random positive money amount.
            <orderedlist>
              <title>Parameters</title>
              <listitem>
                length: Integer (required) The number of digits in the whole amount.
              </listitem>
            </orderedlist>
            <example>
              <code>#{monetaryFunctions.randomPositive(3)}</code>
              produces a random monetary amount between 100.00 and 999.99
            </example>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>randomNegative(int length)</term>
        <listitem>
          <para>
            Gets a random negative money amount.
            <orderedlist>
              <title>Parameters</title>
              <listitem>
                length: Integer (required) The number of digits in the whole amount.
              </listitem>
            </orderedlist>
            <example>
              <code>#{monetaryFunctions.randomNegative(3)}</code>
              produces a random monetary amount between -100.00 and -999.99
            </example>
          </para>
        </listitem>
      </varlistentry>

    </variablelist>
  </section>

  <section>
    <title>Numeric Functions</title>
    <variablelist>

      <varlistentry>
        <term>add(double... values)</term>
        <listitem>
          <para>
            Adds a list of values
            <orderedlist>
              <title>Parameters</title>
              <listitem>
                values: Doubles (required) Variable number of number to add together.
              </listitem>
            </orderedlist>
            <example>
              <code>#{numericFunctions.add(3,2,6)}</code>
              results in 3 + 2 + 6 = 11
            </example>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>subtract(double... values)</term>
        <listitem>
          <para>
            Subtracts a list of values from the first value
            <orderedlist>
              <title>Parameters</title>
              <listitem>
                values: Doubles (required) Variable number of number to subtract
              </listitem>
            </orderedlist>
            <example>
              <code>#{numericFunctions.subtract(10,2,3)}</code>
              results in 10 - 2 - 3 = 5
            </example>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>mod(int value, int modulo)</term>
        <listitem>
          <para>
            Preforms a modulo operation, or the whole remainder of a division operation
            <orderedlist>
              <title>Parameters</title>
              <listitem>
                value: Integer (required) The number ot modulo.
              </listitem>
              <listitem>
                modulo: Integer (required) The.
              </listitem>
            </orderedlist>
            <example>
              <code>#{numericFunctions.mod(5,4)}</code>
              results in 5 % 4 = 1
            </example>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>randomPositiveWhole(int length)</term>
        <listitem>
          <para>
            Gets a random positive integer value.
            <orderedlist>
              <title>Parameters</title>
              <listitem>
                length: Integer (required) The number of digits in the whole amount.
              </listitem>
            </orderedlist>
            <example>
              <code>#{numericFunctions.randomPositiveWhole(3)}</code>
              produces a random value between 100 and 999
            </example>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>randomNegativeWhole(int length)</term>
        <listitem>
          <para>
            Gets a random negative integer value.
            <orderedlist>
              <title>Parameters</title>
              <listitem>
                length: Integer (required) The number of digits in the whole amount.
              </listitem>
            </orderedlist>
            <example>
              <code>#{numericFunctions.randomNegativeWhole(3)}</code>
              produces a random value between -100 and -999
            </example>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>randomPositiveFloat(int length, int decimalPlaces)</term>
        <listitem>
          <para>
            Gets a random positive float value.
            <orderedlist>
              <title>Parameters</title>
              <listitem>
                length: Integer (required) The number of digits in the whole amount.
              </listitem>
              <listitem>
                decimalPlaces: Integer (required) The number of digits after the decimal.
              </listitem>
            </orderedlist>
            <example>
              <code>#{numericFunctionS.randompPositiveFloat(3,2)}</code>
              produces a random value between 100.00 and 999.99
            </example>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>randomNegativeFloat(int length, int decimalPlaces)</term>
        <listitem>
          <para>
            Gets a random negative float value.
            <orderedlist>
              <title>Parameters</title>
              <listitem>
                length: Integer (required) The number of digits in the whole amount.
              </listitem>
              <listitem>
                decimalPlaces: Integer (required) The number of digits after the decimal.
              </listitem>
            </orderedlist>
            <example>
              <code>#{numericFunctions.randomNegativeFloat(3,2)}</code>
              produces a random value between -100.00 and -999.00
            </example>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>random(int min, int max)</term>
        <listitem>
          <para>
            Gets a random negative float value.
            <orderedlist>
              <title>Parameters</title>
              <listitem>
                min: Integer (optional) The minimum value to return. default 0.
              </listitem>
              <listitem>
                max: Integer (required) maximum value to return.
              </listitem>
            </orderedlist>
            <example>
              <code>#{numericFunctions.random(4,10)}</code>
              produces a random value between 4 and 10
            </example>
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section>
    <title>Tax Functions</title>
    <variablelist>

      <varlistentry>
        <term>getSsn(long startSSN)</term>
        <listitem>
          <para>
            Gets a valid Social Security Number starting at at specific number. Each user will get a unique ssn. range
            is divided evenly across all agents.
            <orderedlist>
              <title>Parameters</title>
              <listitem>
                startSSN: Integer The starting number to use as a ssn.
              </listitem>
            </orderedlist>
            <example>
              <code>#{taxFunctions.getSsn(562000000)}</code>
              returns the next ssn requested after the given number.
            </example>
          </para>
        </listitem>
      </varlistentry>

    </variablelist>
  </section>

</chapter>
