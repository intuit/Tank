/* The following code was generated by JFlex 1.4.1 on 2/25/10 4:07 PM */

/*
 * 01/24/2005
 *
 * XMLTokenMaker.java - Generates tokens for XML syntax highlighting.
 * Copyright (C) 2005 Robert Futrell
 * robert_futrell at users.sourceforge.net
 * http://fifesoft.com/rsyntaxtextarea
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA.
 */
package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;

/**
 * Scanner for XML.
 * 
 * This implementation was created using <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file was
 * modified for performance. Memory allocation needs to be almost completely removed to be competitive with the
 * handwritten lexers (subclasses of <code>AbstractTokenMaker</code>, so this class has been modified so that Strings
 * are never allocated (via yytext()), and the scanner never has to worry about refilling its buffer (needlessly copying
 * chars around). We can achieve this because RText always scans exactly 1 line of tokens at a time, and hands the
 * scanner this line as an array of characters (a Segment really). Since tokens contain pointers to char arrays instead
 * of Strings holding their contents, there is no need for allocating new memory for Strings.
 * <p>
 * 
 * The actual algorithm generated for scanning has, of course, not been modified.
 * <p>
 * 
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 * <li>The generated <code>XMLTokenMaker.java</code> file will contain two definitions of both <code>zzRefill</code> and
 * <code>yyreset</code>. You should hand-delete the second of each definition (the ones generated by the lexer), as
 * these generated methods modify the input buffer, which we'll never have to do.</li>
 * <li>You should also change the declaration/definition of zzBuffer to NOT be initialized. This is a needless memory
 * allocation for us since we will be pointing the array somewhere else anyway.</li>
 * <li>You should NOT call <code>yylex()</code> on the generated scanner directly; rather, you should use
 * <code>getTokenList</code> as you would with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 * 
 * @author Robert Futrell
 * @version 0.5
 * 
 */

public class XMLTokenMaker extends AbstractMarkupTokenMaker {

    /** This character denotes the end of file */
    public static final int YYEOF = -1;

    /** lexical states */
    public static final int INTAG = 4;
    public static final int DTD = 3;
    public static final int INATTR_DOUBLE = 5;
    public static final int YYINITIAL = 0;
    public static final int COMMENT = 1;
    public static final int CDATA = 7;
    public static final int INATTR_SINGLE = 6;
    public static final int PI = 2;

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED =
            "\11\0\1\6\1\4\1\0\1\3\23\0\1\6\1\12\1\26\3\0" +
                    "\1\7\1\11\5\0\1\22\1\2\1\24\12\2\1\1\1\10\1\5" +
                    "\1\25\1\21\1\23\1\0\1\16\1\1\1\14\1\15\17\1\1\17" +
                    "\6\1\1\13\1\0\1\20\1\0\1\1\1\0\32\1\uff85\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\5\0\2\1\1\0\2\2\1\3\1\4\1\5\1\6" +
                    "\1\1\1\7\2\1\1\10\2\1\1\11\1\12\2\13" +
                    "\1\14\1\15\1\16\1\17\1\20\1\1\1\21\1\1" +
                    "\1\22\2\1\1\23\1\24\1\25\1\4\1\6\1\0" +
                    "\1\26\3\0\1\27\1\30\1\31\1\0\1\32\4\0" +
                    "\1\33";

    private static int[] zzUnpackAction() {
        int[] result = new int[56];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0; /* index in packed string */
        int j = offset; /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do
                result[j++] = value;
            while (--count > 0);
        }
        return j;
    }

    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\27\0\56\0\105\0\134\0\163\0\212\0\241" +
                    "\0\270\0\317\0\346\0\375\0\u0114\0\u012b\0\u0142\0\346" +
                    "\0\u0159\0\u0170\0\346\0\u0187\0\u019e\0\346\0\346\0\u01b5" +
                    "\0\u01cc\0\346\0\346\0\u01e3\0\346\0\346\0\u01fa\0\346" +
                    "\0\u0211\0\346\0\u0228\0\u023f\0\u0256\0\u026d\0\346\0\u0284" +
                    "\0\346\0\u029b\0\346\0\u02b2\0\u02c9\0\u02e0\0\u02f7\0\346" +
                    "\0\346\0\u030e\0\346\0\u0325\0\u033c\0\u0353\0\u036a\0\346";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[56];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0; /* index in packed string */
        int j = offset; /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\3\11\1\12\1\13\1\14\1\15\1\16\17\11\4\17" +
                    "\1\20\15\17\1\21\4\17\4\22\1\23\16\22\1\24" +
                    "\3\22\4\25\1\26\14\25\1\27\5\25\3\30\1\31" +
                    "\1\0\1\30\1\15\2\30\1\32\7\30\1\33\2\30" +
                    "\1\34\1\35\1\36\26\37\1\40\11\41\1\42\15\41" +
                    "\20\43\1\44\6\43\4\11\4\0\22\11\1\12\2\0" +
                    "\1\15\1\0\17\11\30\0\1\45\10\0\1\46\1\0" +
                    "\4\45\3\0\1\47\1\50\5\0\1\15\2\0\1\15" +
                    "\20\0\6\16\1\0\1\16\1\51\16\16\4\17\1\0" +
                    "\15\17\1\0\4\17\22\0\1\52\4\0\4\22\1\0" +
                    "\16\22\1\0\3\22\21\0\1\53\5\0\4\25\1\0" +
                    "\14\25\1\0\5\25\4\30\1\0\1\30\1\0\2\30" +
                    "\1\0\7\30\1\0\2\30\3\0\3\30\1\31\1\0" +
                    "\1\30\1\15\2\30\1\0\7\30\1\0\2\30\24\0" +
                    "\1\33\5\0\26\37\1\0\11\41\1\0\15\41\20\43" +
                    "\1\0\6\43\20\0\1\54\7\0\2\45\11\0\4\45" +
                    "\2\0\1\45\17\0\1\55\6\0\1\56\5\0\1\57" +
                    "\12\0\4\57\30\0\1\60\26\0\1\61\21\0\1\62" +
                    "\34\0\1\63\5\0\2\57\11\0\4\57\2\0\1\57" +
                    "\21\0\1\64\27\0\1\65\27\0\1\66\25\0\1\67" +
                    "\23\0\1\70\13\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[897];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0; /* index in packed string */
        int j = offset; /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do
                result[j++] = value;
            while (--count > 0);
        }
        return j;
    }

    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
            "Unkown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\5\0\2\1\1\0\2\1\1\11\4\1\1\11\2\1" +
                    "\1\11\2\1\2\11\2\1\2\11\1\1\2\11\1\1" +
                    "\1\11\1\1\1\11\4\1\1\11\1\1\1\11\1\0" +
                    "\1\11\3\0\1\1\2\11\1\0\1\11\4\0\1\11";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[56];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0; /* index in packed string */
        int j = offset; /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do
                result[j++] = value;
            while (--count > 0);
        }
        return j;
    }

    /** the input device */
    private java.io.Reader zzReader;

    /** the current state of the DFA */
    private int zzState;

    /** the current lexical state */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is the source of the yytext() string
     */
    private char zzBuffer[];

    /** the textposition at the last accepting state */
    private int zzMarkedPos;

    /** the current text position in the buffer */
    private int zzCurrentPos;

    /** startRead marks the beginning of the yytext() string in the buffer */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read from input
     */
    private int zzEndRead;

    /** zzAtEOF == true <=> the scanner is at the EOF */
    private boolean zzAtEOF;

    /* user code: */

    /**
     * Token type specific to XMLTokenMaker; this signals that the user has ended a line with an unclosed XML tag; thus
     * a new line is beginning still inside of the tag.
     */
    public static final int INTERNAL_INTAG = -1;

    /**
     * Whether closing markup tags are automatically completed for HTML.
     */
    private static boolean completeCloseTags;

    /**
     * Constructor. This must be here because JFlex does not generate a no-parameter constructor.
     */
    public XMLTokenMaker() {
    }

    static {
        completeCloseTags = true;
    }

    /**
     * Adds the token specified to the current linked list of tokens.
     * 
     * @param tokenType
     *            The token's type.
     */
    private void addToken(int tokenType) {
        addToken(zzStartRead, zzMarkedPos - 1, tokenType);
    }

    /**
     * Adds the token specified to the current linked list of tokens.
     * 
     * @param tokenType
     *            The token's type.
     */
    private void addToken(int start, int end, int tokenType) {
        int so = start + offsetShift;
        addToken(zzBuffer, start, end, tokenType, so);
    }

    /**
     * Adds the token specified to the current linked list of tokens.
     * 
     * @param array
     *            The character array.
     * @param start
     *            The starting offset in the array.
     * @param end
     *            The ending offset in the array.
     * @param tokenType
     *            The token's type.
     * @param startOffset
     *            The offset in the document at which this token occurs.
     */
    public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
        super.addToken(array, start, end, tokenType, startOffset);
        zzStartRead = zzMarkedPos;
    }

    /**
     * Returns whether markup close tags should be completed. For XML, the default value is <code>true</code>.
     * 
     * @return Whether closing markup tags are completed.
     * @see #setCompleteCloseTags(boolean)
     */
    public boolean getCompleteCloseTags() {
        return completeCloseTags;
    }

    /**
     * Static version of {@link #getCompleteCloseTags()}. This hack is unfortunately needed for applications to be able
     * to query this value without instantiating this class.
     * 
     * @return Whether closing markup tags are completed.
     * @see #setCompleteCloseTags(boolean)
     */
    public static boolean getCompleteCloseMarkupTags() {
        return completeCloseTags;
    }

    /**
     * Always returns <tt>false</tt>, as you never want "mark occurrences" working in XML files.
     * 
     * @param type
     *            The token type.
     * @return Whether tokens of this type should have "mark occurrences" enabled.
     */
    public boolean getMarkOccurrencesOfTokenType(int type) {
        return false;
    }

    /**
     * Returns the first token in the linked list of tokens generated from <code>text</code>. This method must be
     * implemented by subclasses so they can correctly implement syntax highlighting.
     * 
     * @param text
     *            The text from which to get tokens.
     * @param initialTokenType
     *            The token type we should start with.
     * @param startOffset
     *            The offset into the document at which <code>text</code> starts.
     * @return The first <code>Token</code> in a linked list representing the syntax highlighted text.
     */
    public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

        resetTokenList();
        this.offsetShift = -text.offset + startOffset;

        // Start off in the proper state.
        int state = Token.NULL;
        switch (initialTokenType) {
        case Token.COMMENT_MULTILINE:
            state = COMMENT;
            start = text.offset;
            break;
        case Token.FUNCTION:
            state = DTD;
            start = text.offset;
            break;
        case Token.LITERAL_STRING_DOUBLE_QUOTE:
            state = INATTR_DOUBLE;
            start = text.offset;
            break;
        case Token.LITERAL_CHAR:
            state = INATTR_SINGLE;
            start = text.offset;
            break;
        case Token.PREPROCESSOR:
            state = PI;
            start = text.offset;
            break;
        case INTERNAL_INTAG:
            state = INTAG;
            start = text.offset;
            break;
        case Token.VARIABLE:
            state = CDATA;
            start = text.offset;
            break;
        default:
            state = Token.NULL;
        }

        s = text;
        try {
            yyreset(zzReader);
            yybegin(state);
            return yylex();
        } catch (IOException ioe) {
            ioe.printStackTrace();
            return new DefaultToken();
        }

    }

    /**
     * Sets whether markup close tags should be completed.
     * 
     * @param complete
     *            Whether closing markup tags are completed.
     * @see #getCompleteCloseTags()
     */
    public static void setCompleteCloseTags(boolean complete) {
        completeCloseTags = complete;
    }

    /**
     * Refills the input buffer.
     * 
     * @return <code>true</code> if EOF was reached, otherwise <code>false</code>.
     */
    private boolean zzRefill() {
        return zzCurrentPos >= s.offset + s.count;
    }

    /**
     * Resets the scanner to read from a new input stream. Does not close the old reader.
     * 
     * All internal variables are reset, the old input stream <b>cannot</b> be reused (internal buffer is discarded and
     * lost). Lexical state is set to <tt>YY_INITIAL</tt>.
     * 
     * @param reader
     *            the new input stream
     */
    public final void yyreset(java.io.Reader reader) {
        // 's' has been updated.
        zzBuffer = s.array;
        /*
         * We replaced the line below with the two below it because zzRefill no longer "refills" the buffer (since the
         * way we do it, it's always "full" the first time through, since it points to the segment's array). So, we
         * assign zzEndRead here.
         */
        // zzStartRead = zzEndRead = s.offset;
        zzStartRead = s.offset;
        zzEndRead = zzStartRead + s.count - 1;
        zzCurrentPos = zzMarkedPos = s.offset;
        zzLexicalState = YYINITIAL;
        zzReader = reader;
        zzAtEOF = false;
    }

    /**
     * Creates a new scanner There is also a java.io.InputStream version of this constructor.
     * 
     * @param in
     *            the java.io.Reader to read input from.
     */
    public XMLTokenMaker(java.io.Reader in) {
        this.zzReader = in;
    }

    /**
     * Creates a new scanner. There is also java.io.Reader version of this constructor.
     * 
     * @param in
     *            the java.io.Inputstream to read input from.
     */
    public XMLTokenMaker(java.io.InputStream in) {
        this(new java.io.InputStreamReader(in));
    }

    /**
     * Unpacks the compressed character translation table.
     * 
     * @param packed
     *            the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x10000];
        int i = 0; /* index in packed string */
        int j = 0; /* index in unpacked array */
        while (i < 78) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do
                map[j++] = value;
            while (--count > 0);
        }
        return map;
    }

    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true; /* indicate end of file */
        zzEndRead = zzStartRead; /* invalidate buffer */

        if (zzReader != null)
            zzReader.close();
    }

    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }

    /**
     * Enters a new lexical state
     * 
     * @param newState
     *            the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }

    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }

    /**
     * Returns the character at position <tt>pos</tt> from the matched text.
     * 
     * It is equivalent to yytext().charAt(pos), but faster
     * 
     * @param pos
     *            the position of the character to fetch. A value from 0 to yylength()-1.
     * 
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead + pos];
    }

    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }

    /**
     * Reports an error that occured while scanning.
     * 
     * In a wellformed scanner (no or only correct usage of yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen". If this method is called, something is seriously
     * wrong (e.g. a JFlex bug producing a faulty scanner etc.).
     * 
     * Usual syntax/scanner level error handling should be done in error fallback rules.
     * 
     * @param errorCode
     *            the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }

    /**
     * Pushes the specified amount of characters back into the input stream.
     * 
     * They will be read again by then next call of the scanning method
     * 
     * @param number
     *            the number of characters to be read again. This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }

    /**
     * Resumes scanning until the next regular expression is matched, the end of input is encountered or an I/O-Error
     * occurs.
     * 
     * @return the next token
     * @exception java.io.IOException
     *                if any I/O-Error occurs
     */
    public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = zzLexicalState;

            zzForAction: {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL)
                        zzInput = zzBufferL[zzCurrentPosL++];
                    else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    }
                    else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        }
                        else {
                            zzInput = zzBufferL[zzCurrentPosL++];
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1)
                        break zzForAction;
                    zzState = zzNext;

                    int zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8)
                            break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
            case 3: {
                addNullToken();
                return firstToken;
            }
            case 28:
                case 54:
                case 53:
                case 52:
                case 51:
                case 50:
                case 49:
                case 48:
                case 47:
                case 46:
                case 45:
                case 44:
                case 43:
                case 42:
                case 41:
                case 40:
                case 39:
                case 38:
                case 37:
                case 36:
                case 35:
                case 34:
                case 33:
                case 32:
                case 31:
                case 30:
                case 29:
                    break;
            case 4: {
                addToken(Token.MARKUP_TAG_DELIMITER);
                yybegin(INTAG);
            }
                case 23: {
                int count = yylength();
                addToken(zzStartRead, zzStartRead + 1, Token.MARKUP_TAG_DELIMITER);
                addToken(zzMarkedPos - (count - 2), zzMarkedPos - 1, Token.MARKUP_TAG_NAME);
                yybegin(INTAG);
            }
                case 17: {
                yybegin(INTAG);
                addToken(start, zzStartRead, Token.LITERAL_STRING_DOUBLE_QUOTE);
            }
                case 10: {
                yybegin(YYINITIAL);
                addToken(start, zzStartRead, Token.FUNCTION);
            }
                case 24: {
                yybegin(YYINITIAL);
                addToken(start, zzStartRead + 2, Token.COMMENT_MULTILINE);
            }
                case 14: {
                addToken(Token.MARKUP_TAG_DELIMITER); /* Not valid but we'll still accept it */
            }
                case 5: {
                addToken(Token.WHITESPACE);
            }
                case 9: {
                addToken(start, zzStartRead - 1, Token.FUNCTION);
                return firstToken;
            }
                case 20: {
                start = zzMarkedPos - 2;
                yybegin(DTD);
            }
                case 2: {
                addToken(Token.IDENTIFIER);
            }
                case 27: {
                addToken(Token.DATA_TYPE);
                start = zzMarkedPos;
                yybegin(CDATA);
            }
                case 6: {
                addToken(Token.DATA_TYPE);
            }
                case 19: {
                int count = yylength();
                addToken(zzStartRead, zzStartRead, Token.MARKUP_TAG_DELIMITER);
                addToken(zzMarkedPos - (count - 1), zzMarkedPos - 1, Token.MARKUP_TAG_NAME);
                yybegin(INTAG);
            }
                case 26: {
                start = zzMarkedPos - 4;
                yybegin(COMMENT);
            }
                case 25: {
                int temp = zzStartRead;
                yybegin(YYINITIAL);
                addToken(start, zzStartRead - 1, Token.VARIABLE);
                addToken(temp, zzMarkedPos - 1, Token.DATA_TYPE);
            }
                case 21: {
                start = zzMarkedPos - 2;
                yybegin(PI);
            }
                case 16: {
                start = zzMarkedPos - 1;
                yybegin(INATTR_DOUBLE);
            }
                case 13: {
                yybegin(YYINITIAL);
                addToken(Token.MARKUP_TAG_DELIMITER);
            }
                case 12: {
                start = zzMarkedPos - 1;
                yybegin(INATTR_SINGLE);
            }
                case 8: {
                addToken(start, zzStartRead - 1, Token.PREPROCESSOR);
                return firstToken;
            }
                case 18: {
                yybegin(INTAG);
                addToken(start, zzStartRead, Token.LITERAL_CHAR);
            }
                case 22: {
                yybegin(YYINITIAL);
                addToken(start, zzStartRead + 1, Token.PREPROCESSOR);
            }
                case 15: {
                addToken(Token.OPERATOR);
            }
                case 11: {
                addToken(Token.MARKUP_TAG_ATTRIBUTE);
            }
                case 1: {
            }
                case 7: {
                addToken(start, zzStartRead - 1, Token.COMMENT_MULTILINE);
                return firstToken;
            }
                default:
                if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                    zzAtEOF = true;
                    switch (zzLexicalState) {
                    case INTAG: {
                        addToken(start, zzStartRead - 1, INTERNAL_INTAG);
                        return firstToken;
                    }
                    case 57:
                        case 64:
                        case 63:
                        case 62:
                        case 61:
                        case 60:
                        case 59:
                        case 58:
                            break;
                    case DTD: {
                        addToken(start, zzStartRead - 1, Token.FUNCTION);
                        return firstToken;
                    }
                        case INATTR_DOUBLE: {
                        addToken(start, zzStartRead - 1, Token.LITERAL_STRING_DOUBLE_QUOTE);
                        return firstToken;
                    }
                        case YYINITIAL: {
                        addNullToken();
                        return firstToken;
                    }
                        case COMMENT: {
                        addToken(start, zzStartRead - 1, Token.COMMENT_MULTILINE);
                        return firstToken;
                    }
                        case CDATA: {
                        addToken(start, zzStartRead - 1, Token.VARIABLE);
                        return firstToken;
                    }
                        case INATTR_SINGLE: {
                        addToken(start, zzStartRead - 1, Token.LITERAL_CHAR);
                        return firstToken;
                    }
                        case PI: {
                        addToken(start, zzStartRead - 1, Token.PREPROCESSOR);
                        return firstToken;
                    }
                        default:
                        return null;
                    }
                }
                else {
                    zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }

}
